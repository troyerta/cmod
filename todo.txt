
Tests:
[=======   ] - Finish Task queue - print return values properly and queue data
[          ] - Module test scripts should take an argument that enables results to be printed or redirected to some file
[          ] - Add fff to test generator - add it commented out during test source generation?
[          ] - Add option to "./cmod test -m=module_name"  : -s=SUITE_NAME - To build/run only the specified suite to the runner - should this be a cmod list feature?


Config and Makefile Changes:
[          ] - Structure command handling more like meson does
[          ] - Check generated files against it's config glob to warn if the file name does not match glob - when user break their promise
[          ] - Set const key values - no more string literals
[          ] - Move global makefile and test harnesses to cmod dir
[          ] - Rename and clean-out files in cmod-lib
[          ] - Default/Required config sections should have const name define in SW
             - Demand that all modules have the same structure everywhere?
             - Or Store a module's structure in a config.ini local to the module?
             - Store settings in an ini IFF the module needs to differ in structure from the default?
[          ] - Make config section for Test Harness settings, paths
             test_harness_sources = tools/test_harnesses/unity/unity.c
             makefile_sources = source test_source test_harness_sources
             test_harness_headers = tools/test_harnesses/unity/unity.h
             makefile_headers = header test_harness_headers
[          ] - Need a function that checks Configs and fills in defaults as necessary
[          ] - Eliminate literal magic string in accesses to module_configs dict so the list of expected config key
             - go from:
             name = mod_configs["some_name_setting"]
             move to:
             name_setting_key = "some_name_setting"
             name = mod_configs[name_setting_key]
[          ] - Handle cases for bad config, or no config given or present - make built-in default styles and conventions
[          ] - Add some copywrite and license strings in module.py to demonstrate how it could work
[          ] - Handle module-specific/local configs, which can overwrite global config.ini
[          ] - Fix python naming conventions throughout Cmod:
             - Python recommends UpperCamelCase for class names, CAPITALIZED_WITH_UNDERSCORES for constants, and lowercase_separated_by_underscores for other names.
             - If a name is intended to be "private", it is prefixed by an underscore. Private variables are enforced in Python only by convention. Names can also be suffixed with an underscore to prevent conflict with Python keywords. Prefixing with double underscores changes behaviour in classes with regard to name mangling. Prefixing and suffixing with double underscores are reserved for "magic names" which fulfill special behaviour in Python objects.
[          ] - Write a CONTRIBUTING_GUIDE.md and a STYLE_GUIDE.md
[          ] - Enable file generator name overrides - see cmod_notes - 51
[          ] - Add test harness settings to config.ini

List:
[          ] - Make a verbose flag option for "list" command, which can print out a summary of all the files that cmod finds in a module given the current config regexes
[          ] - List all modules under the specified parent module via cmod list --m=module
[          ] - List all modules with their test suites/groups under the specified parent module via cmod list --m=module --suites
             - Now, we should be able to run this via "cmod test --m=module --suites=?" which is the same as "cmod list --m=module --suites" Which will list the suites in that module
             - Now we can go and run just that specified suite: cmod test --module=HWM --suite=TEST_HWM_SUITE
             Or possibly even
             cmod test --module=HWM --suite=TEST_HWM_SUITE --test=TestNumbersDontExplode

Makefile:
[          ] - Add an production code "header_dir" option to the config, and add to Makefile include flags
[          ] - Enable CFLAG overrides in the module-makefile

Setup and Install:
[          ] - Make a bash script that runs the python venv setup and installation
             https://stackoverflow.com/questions/53151899/python-how-to-script-virtual-environment-building-and-activation
             https://stackoverflow.com/questions/57921255/how-to-create-python-virtual-environment-within-a-python-script
[          ] - Fix the project-level scripts to check for the proper venv before running, or maybe just a init/config script

Generation:
[          ] - Try to add includes to generated source files
[          ] - Add "This is a generated file" warning to the files that should not be hand-modified
             - /* Do not modify - this is a generated file. Please refer to *** to modify the way this file is made
[          ] - Draft up a copy of the licensing text to be used
[          ] - Make a module exporter (generates makefile and copies test harness to a target dir for testing module outside of project) $ cmod export --m=dsp --r --o=../dsp
[          ] - Add option to randomize during testing: module list, test group list, test list

General:
[          ] - Replace "cmod" and ArgParse.py with cmodmain.py - see mesonmain.py for reference
[=         ] - Finish "help" messages in scripts
[     ?    ] - Move utest folder to cmod dir as a "plugin" or "aux" directory
[=         ] - Write manual and examples and demos - "Release" version v0.01 on github
[          ] - There should be 2 demos: Simple and minimal, and then a complete "tour guide" of advanced usage
[          ] - Add license to top of every python source file
[          ] - Possible to get rid of module makefiles iff all modules use the same config.ini settings
             - Explore the cost of asking for this constraint.
             - Might still be nice to have custom settings possible for each module
[          ] - Add timing attr to each test run process
[          ] - Add --version argument
[          ] - Print during test, or only after test is complete - add to config
[          ] - Make cmod export function
             cmod export --module --r --test_harness --make --meson

[RESOURCES]
https://github.com/lefticus/cppbestpractices/blob/master/02-Use_the_Tools_Available.md

[TDD]
Test Harnesses: Catch, minunit, Greatest, CppUTest API, CMocka, check
https://sourceforge.net/projects/gcgreatcode/
https://www.gnu.org/software/indent/
https://invisible-island.net/bcpp/

[Cmod AUX]

Selectable Test Harness Support:
[          ] - Support more test harnesses - configurable with config.ini
[          ] - Add test harness abstraction layer
[          ] - Make a mocks wrapper - attach to config class

Selectable Build System Support:
- Make, Meson/Ninja, CMake/Ninja, waf

Selectable Host Toolchain Support:
[          ] - Make host toolchain configurable, GCC, Clang
[          ] - Make cross compile toolchain configurable
[          ] - Make both host compiler and cross compiler usable from specified system path instead of relying on $PATH

Snippet Generation:
- XClip, Xsel tool detection and use
[          ] - Make snippet templates, one for each coding style,--k&r, allman, gnu, mozilla, etc, custom
[          ] - Snippet generator should check for xclip or xsel before running, otherwise try installing it
"sudo apt-get install xclip" or "sudo apt-get install xsel" (only necessary for Linux systems)

Test Report XML XUnit Generation:
[          ] - Configurable test result output formatting - xml, JUnit, XUnit, HTML summaries, text
[          ] - Add test results layer to convert between result formats

Static Analysis Scripting:
[          ] - Add compiledb option to project: https://pypi.org/project/compiledb/ ( useful for static analysis )

Complexity Analysis:
[          ] - Add lizard code analyzer
[          ] - Code analysis reports on LOC count

Code Formatter Scripting:
[          ] - Make basic formatter class that calls uncrustify or something
[          ] - Add pycparser
[          ] - Get AST data from a source file
[          ] - Re-generate/print a new source file from the old one
[          ] - Define a standard format
[          ] - Add a basic formatter class
[          ] - Add code format to project config.ini - inform all snippet and file generators, and format tools of this setting

Coverage Scripting:
[          ] - Run and print coverity and gcov reports

Cmod Project:
[          ] - Add script that can do venv stuff: Use config class to add/remove python packages to venv
             - Makes sure that python3 is installed - callable from environment
             - Makes sure that pip or pip3 is installed - callable from environment
             - Checks for venv
             - Removes venv
             - Sets up venv
             - Adds package to venv, updates requirements.txt
             python3.8 -m venv tools/cmod/venv
             source tools/venv/bin/activate
             pip3.8 install -r requirements.txt
             deactivate - TODO: make the tools/ dir configurable when setup.py runs
[=====     ] - Start adding other python modules
[          ] - look into adding pre-post-commit git hooks for doing some more stuff automatically







