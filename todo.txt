
export
--module
--r
--test_harness
--make
--meson

[RESOURCES]
https://github.com/lefticus/cppbestpractices/blob/master/02-Use_the_Tools_Available.md

[TDD]
Test Harnesses: Catch, minunit, Greatest, CppUTest API, CMocka, check
Mocking Frameworks: FFF, CMock, HippoMocks
https://github.com/dascandy/hippomocks
[STATIC]
Static Analyzers:
Complexity:
Formatters: Snippet of code #1! Snippet of code #1!
https://sourceforge.net/projects/gcgreatcode/
artistic style
uncrustify
https://www.gnu.org/software/indent/
https://invisible-island.net/bcpp/

TODO Before starting MCU project:

Tests:
[==========] - Module test scripts should take an argument that enables results to be printed or redirected to some file
            [    ] - Step 1:
[          ] - Add fff to test generator - add it commented out during test source generation?
[==========] - Add another verbosity level to handle printed test summary
[========  ] - Remove test suite source file, just build suites into Runner source
            [====] - config.ini: Rm line 23-25, line 51
            [====] - gen_module_makefile.py lines 37,45,46
            [====] - TestModule.py: line 19,20,21 modify gen_test_suites() in TestModule class
            [====] - module_makefile: Rm all refs to SUITE_DIR and SUITE_SRC
            [====] -  Rm suite stuff from each module's makefile
            [    ] - Add option to "./cmod test -m=module_name"  : -s=SUITE_NAME
                    To build/run only the specified suite to the runner
            - should this be a cmod list feature?

Config and Makefile Changes:

[==========] - Set Task queue to run tests if > 20 modules are found
[==========] - Set default verbosity to 4
[==========] - Add file search glob to FILE DEFS
[==========] - Create 2 util functions that find file/files using that glob
               - Best to just always return a list of matches, and handle lists instead of expecting only 1 match
[          ] - Rewrite the way module makefiles are printed with SRC_DIR lists
[          ] - Re-generate the module Makefile for any test module
[          ] - Add new global makefile
[==========] - Convert Module and Clean classes to use the globber, instead of regex
[          ] - Integrate test_config 3 and 4 with config.ini
[          ] - Set const key values - no more string literals
[          ] - Make getters for config dict to simplify fetching values
[          ] - Enforce the "one-tag per file def" requirement
[          ] - Move global makefile and test harnesses to cmod dir
[          ] - Rename and clean-out files in cmod-lib

- Add test harness to config.ini
- See test_config4.ini
This also makes the case that each file def
needs to have a universal string associated with
it, so it can be referred to as a generation flag, a cleaning flag, used to tell which files the makefile should compile, which headers/directories to include, etc.
In the same way, we should be able to use the config file to point to our test harness files, but specifying the regexes for finding the tests and groups is still not very... configurable.... rats.
This also makes the case that cmod should write the module makefile in a more general way:
SRC_DIRS = . unit_testing/tests unit_testing/runners

New Module Makefile:
- See new_mk.mk

List:
[          ] - Make a verbose flag option for "list" command, which can print out a summary of all the files that cmod finds in a module given the current config regexes
[          ] - List all modules under the specified parent module via cmod list --m=module
[          ] - List all modules with their test suites/groups under the specified parent module via cmod list --m=module --suites
  - Now, we should be able to run this via "cmod test --m=module --suites=?" which is the same as "cmod list --m=module --suites" Which will list the suites in that module
  - Now we can go and run just that specified suite: cmod test --module=HWM --suite=TEST_HWM_SUITE
    Or possibly even
    cmod test --module=HWM --suite=TEST_HWM_SUITE --test=TestNumbersDontExplode

Makefile:
[          ] - Add an production code "header_dir" option to the config, and add to Makefile include flags
[          ] - Enable CFLAG overrides in the module-makefile

Setup and Install:
[          ] - Make a bash script that runs the python venv setup and installation
https://stackoverflow.com/questions/53151899/python-how-to-script-virtual-environment-building-and-activation
https://stackoverflow.com/questions/57921255/how-to-create-python-virtual-environment-within-a-python-script
[          ] - Fix the project-level scripts to check for the proper venv before running, or maybe just a init/config script

Configuration:
[==========] - Config should just become a single dictionary that gets read once, then passed around all over the place?
- Demand that all modules have the same structure everywhere?
- Or Store a module's structure in a config.ini local to the module?
- Store settings in an ini IFF the module needs to differ in structure from the default?

Generation:
[=======   ] - FileGenerator.build() needs a new solution - refactor entire thing
[          ] - Add "This is a generated file" warning to the files that should not be hand-modified
            [    ] - /* Do not modify - this is a generated file. Please refer to *** to modify the way this file is made
[          ] - Draft up a copy of the licensing text to be used
            [    ] -
[==        ] - Make generator addition/deletion configurable
[          ] - Make a module exporter (generates makefile and copies test harness to a target dir for testing module outside of project)
$ cmod export --m=dsp --r --o=../dsp
[          ] - Refactor the way generation works
    - Module generation is done with a list of file generators
    - file generators are python modules in some dir, that contain callbacks that cmod uses to create the a file
    - Multiple file generators can live in the same style_hooks.py module to define a consistent generation style, (K&R, allman, Hungarian naming notation)
    - Multiple modules can exist in the same project, and just need to be called out in config.ini
    - Each file generator must define the following callbacks:
        - gen_filename() - What the file is named
        - gen_filepath() - Where the file lives
        - gen_file()     - implements the code style with file write operations
    - Each generator has a name
    - A module generator is just a list of file generators
        - The list can be specifed explicitly, or with a name group of generators that define a coding style
    - DEFAULT_MODULE_STRUCTURE and STYLE sections should be merged, and then called out as a single "style" element in the config
    - Or just put all the options under "MODULE_DEF_A", so another set of options could live in "MODULE_DEF_B"
    - And we could also specify a "DEFAULT_MODULE_DEF" section to fall back on if an option is not present in "MODULE_DEF_A"
    - Remove style_config args - it's now unnecessary

Add option to randomize during testing:
  module list
  test group list
  test list

import io
io.__file__ - name and path of module file from which it is loaded
io.__dict__ - dictionary are all attributes and functions

[        ] - Config class should become a dictionary of dictionaries (or sections)
[        ] - Need a function that converts Configs to a module definition class, filling in defaults as necessary
[        ] - Eliminate literal magic string in accesses to module_configs dict so the list of expected config key

[         ] - go from:
name = mod_configs["some_name_setting"]
move to:
name_setting_key = "some_name_setting"
name = mod_configs[name_setting_key]

General:
[=         ] - Finish "help" messages in scripts
[          ] - Set a git commit template using "git config commit.template relative-path-from-repository-root"
[          ] - Move utest folder to cmod dir as a "plugin" or "aux" directory
[=         ] - Write manual and examples and demos - "Release" version v0.01 on github
[          ] - Add license to top of every source file
[          ] - Possible to get rid of module makefiles iff all modules use the same config.ini settings
- Explore the cost of asking for this constraint.
- Might still be nice to have custom settings possible for each module
[          ] - Define a task queue that sends jobs to a process pool using python multiprocessing
[          ] - Add timing attr to each test run process
[          ] - Add --version argument
[          ] - Add a carraige return output mode option config
[          ] - Print during test, or only after test is complete - config








[Cmod AUX]

Selectable Test Harness Support:
[          ] - Support more test harnesses - configurable with config.ini
[          ] - Add test harness abstraction layer
[          ] - Make a mocks wrapper - attach to config class

Selectable Build System Support:
- Make, Meson, Ninja, CMake?

Selectable Host Toolchain Support:
[          ] - Make host toolchain configurable, GCC, Clang
[          ] - Make cross compile toolchain configurable
[          ] - Make both host compiler and cross compiler usable from specified system path instead of relying on $PATH

Snippet Generation:
- XClip, Xsel tool detection and use
[          ] - Make snippet templates, one for each coding style,--k&r, allman, gnu, mozilla, etc, custom
[          ] - Snippet generator should check for xclip or xsel before running, otherwise try installing it
"sudo apt-get install xclip" or "sudo apt-get install xsel" (only necessary for Linux systems)

Test Report XML XUnit Generation:
[          ] - Configurable test result output formatting - xml, JUnit, XUnit, HTML summaries, text
[          ] - Add test results layer to convert between result formats

Static Analysis Scripting:
[          ] - Add compiledb option to project: https://pypi.org/project/compiledb/ ( useful for static analysis )

Complexity Analysis:
[          ] - Add lizard code analyzer
[          ] - Code analysis reports on LOC count

Code Formatter Scripting:
[          ] - Make basic formatter class that calls uncrustify or something
[          ] - Add pycparser
[          ] - Get AST data from a source file
[          ] - Re-generate/print a new source file from the old one
[          ] - Define a standard format
[          ] - Add a basic formatter class
[          ] - Add code format to project config.ini - inform all snippet and file generators, and format tools of this setting

Coverage Scripting:
[          ] - Run and print coverity and gcov reports

Cmod Project:
[          ] - Add script that can do venv stuff: Use config class to add/remove python packages to venv
- Makes sure that python3 is installed - callable from environment
- Makes sure that pip or pip3 is installed - callable from environment
- Checks for venv
- Removes venv
- Sets up venv
- Adds package to venv, updates requirements.txt
python3.8 -m venv tools/cmod/venv
source tools/venv/bin/activate
pip3.8 install -r requirements.txt
deactivate - TODO: make the tools/ dir configurable when setup.py runs

[=====     ] - Start adding other python modules
[          ] - look into adding pre-post-commit git hooks for doing some more stuff automatically







