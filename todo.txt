
export
--module
--r
--test_harness
--make
--meson

[RESOURCES]
https://github.com/lefticus/cppbestpractices/blob/master/02-Use_the_Tools_Available.md

[TDD]
Test Harnesses: Catch, minunit, Greatest, CppUTest API, CMocka, check
Mocking Frameworks: FFF, CMock, HippoMocks
https://github.com/dascandy/hippomocks
[STATIC]
Static Analyzers:
Complexity:
Formatters: Snippet of code #1! Snippet of code #1!
https://sourceforge.net/projects/gcgreatcode/
artistic style
uncrustify
https://www.gnu.org/software/indent/
https://invisible-island.net/bcpp/

TODO Before starting MCU project:

Tests:
[==========] - Module test scripts should take an argument that enables results to be printed or redirected to some file
            [    ] - Step 1:
[          ] - Add fff to test generator - add it commented out during test source generation?
[==========] - Add another verbosity level to handle printed test summary
[========  ] - Remove test suite source file, just build suites into Runner source
            [====] - config.ini: Rm line 23-25, line 51
            [====] - gen_module_makefile.py lines 37,45,46
            [====] - TestModule.py: line 19,20,21 modify gen_test_suites() in TestModule class
            [====] - module_makefile: Rm all refs to SUITE_DIR and SUITE_SRC
            [====] -  Rm suite stuff from each module's makefile
            [    ] - Add option to "./cmod test -m=module_name"  : -s=SUITE_NAME
                    To build/run only the specified suite to the runner
            - should this be a cmod list feature?

List all modules under the specified parent module
cmod list --m=module

List all modules with their test suites/groups under the specified parent module
cmod list --m=module --suites

Now, we should be able to run this
cmod test --m=module --suites=?

which is the same as
cmod list --m=module --suites

Which will list the suites in that module

Now we can go and run just that specified suite:
cmod test --module=HWM --suite=TEST_HWM_SUITE

Or possibly even
cmod test --module=HWM --suite=TEST_HWM_SUITE --test=TestNumbersDontExplode

Makefile:
[          ] - Add an production code "header_dir" option to the config, and add to Makefile include flags
[          ] - Enable CFLAG overrides in the module-makefile

Setup and Install:
[          ] - Make a bash script that runs the python venv setup and installation
https://stackoverflow.com/questions/53151899/python-how-to-script-virtual-environment-building-and-activation
https://stackoverflow.com/questions/57921255/how-to-create-python-virtual-environment-within-a-python-script
[          ] - Fix the project-level scripts to check for the proper venv before running, or maybe just a init/config script

Configuration:
[==========] - Config should just become a single dictionary that gets read once, then passed around all over the place?
- Demand that all modules have the same structure everywhere?
- Or Store a module's structure in a config.ini local to the module?
- Store settings in an ini IFF the module needs to differ in structure from the default?

Generation:
[=======   ] - FileGenerator.build() needs a new solution - refactor entire thing
[          ] - Add "This is a generated file" warning to the files that should not be hand-modified
            [    ] - /* Do not modify - this is a generated file. Please refer to *** to modify the way this file is made
[          ] - Draft up a copy of the licensing text to be used
            [    ] -
[==        ] - Make generator addition/deletion configurable
[          ] - Make a module exporter (generates makefile and copies test harness to a target dir for testing module outside of project)
$ cmod export --m=dsp --r --o=../dsp

General:
[=         ] - Finish "help" messages in scripts
[          ] - Set a git commit template using "git config commit.template relative-path-from-repository-root"
[          ] - Move utest folder to cmod dir as a "plugin" or "aux" directory
[=         ] - Write manual and examples and demos - "Release" version v0.01 on github
[          ] - Add license to top of every source file
[          ] - Possible to get rid of module makefiles iff all modules use the same config.ini settings
- Explore the cost of asking for this constraint.
- Might still be nice to have custom settings possible for each module
[          ] - Define a task queue that sends jobs to a process pool using python multiprocessing









[Cmod AUX]

Selectable Test Harness Support:
[          ] - Support more test harnesses - configurable with config.ini
[          ] - Add test harness abstraction layer
[          ] - Make a mocks wrapper - attach to config class

Selectable Build System Support:
- Make, Meson, Ninja, CMake?

Selectable Host Toolchain Support:
[          ] - Make host toolchain configurable, GCC, Clang
[          ] - Make cross compile toolchain configurable
[          ] - Make both host compiler and cross compiler usable from specified system path instead of relying on $PATH

Snippet Generation:
- XClip, Xsel tool detection and use
[          ] - Make snippet templates, one for each coding style,--k&r, allman, gnu, mozilla, etc, custom
[          ] - Snippet generator should check for xclip or xsel before running, otherwise try installing it
"sudo apt-get install xclip" or "sudo apt-get install xsel" (only necessary for Linux systems)

Test Report XML XUnit Generation:
[          ] - Configurable test result output formatting - xml, JUnit, XUnit, HTML summaries, text
[          ] - Add test results layer to convert between result formats

Static Analysis Scripting:
[          ] - Add compiledb option to project: https://pypi.org/project/compiledb/ ( useful for static analysis )

Complexity Analysis:
[          ] - Add lizard code analyzer
[          ] - Code analysis reports on LOC count

Code Formatter Scripting:
[          ] - Make basic formatter class that calls uncrustify or something
[          ] - Add pycparser
[          ] - Get AST data from a source file
[          ] - Re-generate/print a new source file from the old one
[          ] - Define a standard format
[          ] - Add a basic formatter class
[          ] - Add code format to project config.ini - inform all snippet and file generators, and format tools of this setting

Coverage Scripting:
[          ] - Run and print coverity and gcov reports

Cmod Project:
[          ] - Add script that can do venv stuff: Use config class to add/remove python packages to venv
- Makes sure that python3 is installed - callable from environment
- Makes sure that pip or pip3 is installed - callable from environment
- Checks for venv
- Removes venv
- Sets up venv
- Adds package to venv, updates requirements.txt
python3.8 -m venv tools/venv
source tools/venv/bin/activate
pip3.8 install -r requirements.txt
deactivate - TODO: make the tools/ dir configurable when setup.py runs

[=====     ] - Start adding other python modules
[          ] - look into adding pre-post-commit git hooks for doing some more stuff automatically
