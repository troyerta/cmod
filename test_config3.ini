[GLOBAL]

project: cmod_demo
software_version: 0.0.1
license:
repo: https://github.com/troyerta/cmod
author: troyerta

# Use "MM/DD/YYY" format
created       = 02/03/2013
documentation = github.com/tt/cmoddocs

# Which module definition should be used by default?
default_module_def = MODULE_DEF_CUST

# Something between 0 and 7 inclusively
default_test_verbosity = 4

# If not specified or valid, or style_hooks.py cannot be opened, the default name convention is a "literal passthrough" style
# If any of the expected entries does not exist here, the default will be used instead
# If any of the expected entires goes missing from here, you can regenerate a complete, default config.ini with
# cmod generate --config=new_config.ini

# File definitions can have either a name_callback,
# or at least (a prefix or suffix or both), but not both prefix/suffix and a
# populated name_callback field
# If nothing is specified, then print error

[FILE_DEF_SOURCE]
generate_callback = print_cust_source
name_callback     = get_cust_source_name
path_in_module    = .

[FILE_DEF_HEADER]
generate_callback = print_cust_header
name_callback     = get_cust_header_name
path_in_module    = .

[FILE_DEF_TEST_SOURCE]
generate_callback = print_cust_test_source
suffix            = _tests
path_in_module    = ./unit_testing

[FILE_DEF_TEST_RUNNER]
generate_callback = print_cust_test_runner
prefix            = test_
suffix            = _runner
path_in_module    = ./unit_testing

[FILE_DEF_TEST_BUILD]
prefix            = test_
suffix            =
path_in_module    = ./unit_testing

[FILE_DEF_TEST_RESULT]
prefix            = test_
suffix            = _results
path_in_module    = ./unit_testing

[FILE_DEF_MAKEFILE]
generate_callback = print_cust_makefile
name_callback     = "Makefile"
path_in_module    = .

[FILE_DEF_TEST_SCRIPT]
generate_callback = print_cust_test_source
name_callback     = "tdd"  # Maybe remove this for a callback anyway...
path_in_module    = .

# These must have generate callbacks defined
[FILE_GENERATOR]
src      = FILE_DEF_SOURCE
hdr      = FILE_DEF_HEADER
test_src = FILE_DEF_TEST_SOURCE
runner   = FILE_DEF_TEST_RUNNER
makefile = FILE_DEF_MAKEFILE
tester   = FILE_DEF_TEST_SCRIPT

# Runners are still generated during runtime, and might not be tracked with version control in all cases, AND
# are still somewhat style-dependent on the test harness being used. Setting up a test runner callback might be good as well
# Would need to allow access to all test cases and test group objects - Is this too complex to expect of the user?
# Not if good templates for these are provides beforehand, I think.
# Files generated during test runtime

# Module definitions are now a list of module files, and 4 settings:
[MODULE_DEF_CUST]
mod_file_source      = FILE_DEF_SOURCE
mod_file_header      = FILE_DEF_HEADER
mod_file_test_source = FILE_DEF_TEST_SOURCE
mod_file_makefile    = FILE_DEF_MAKEFILE

# Generated by Makefile - needs to be described here for module Makefile
# mod_file_exe         = FILE_DEF_TEST_BUILD
# mod_file_results     = FILE_DEF_TEST_RESULT

# Tell Cmod how this module definition find modules
mod_marker_type      = directory
mod_marker_name      = unit_testing

# Tell Cmod where to find this definition's callbacks
mod_callbacks        = style_hooks.py
