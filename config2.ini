[GLOBAL]

author  = tt
email   = address@example.org
project = BigProject
repo    = github.com/tt/BigProject
license = itc

# Use "MM/DD/YYY" format
created       = 02/03/2013
documentation = github.com/tt/BigProjDocs

default_module_def     = MODULE_DEF_CUSTOM
default_test_verbosity = 4

# If not specified or valid, or style_hooks.py cannot be opened, the default name convention is a "literal passthrough" style
# So given a module path of my/new/module/called/foo, the module name is "foo", and
# the generated files will be
# my/new/module/called/foo/foo.c
# my/new/module/called/foo/foo.h
# my/new/module/called/foo/foo_tests.c
# my/new/module/called/foo/foo_runner.c
# my/new/module/called/foo/test_foo.out
# my/new/module/called/foo/test_foo_results.txt
# If any of the expected entries does not exist here, the default will be used instead
# If any of the expected entires goes missing from here, you can regenerate a complete, default config.ini with
# cmod generate --config=new_config.ini
[NAME_CONVENTION_ CUST ]
source_name_cb      = get_cust_source_name
header_name_cb      = get_cust_header_name
test_source_name_cb = get_cust_test_source_name
test_runner_name_cb = get_cust_test_runner_name
module_name_cb      = get_cust_module_name

# Runners are still generated during runtime, and might not be tracked with version control in all cases, AND
# are still somewhat style-dependent on the test harness being used. Setting up a test runner callback might be good as well
# Would need to allow access to all test cases and test group objects - Is this too complex to expect of the user?
# Not if good templates for these are provides beforehand, I think.
# Files generated during test runtime
test_runner_path    = ./
test_exe_path       = ./
test_results_path   = ./
test_runner_prefix  = test_
test_runner_suffix  = _runner
test_exe_prefix     = test_
test_exe_suffix     =
test_results_prefix = test_
test_results_suffix = _results

[CODE_STYLE_CUST]
source_gen_cb       = print_cust_source
header_gen_cb       = print_cust_header
test_source_gen_cb  = print_cust_test_source
test_runner_gen_cb  = print_cust_test_runner

[MODULE_STRUCTURE_CUST]
source_path         = .
header_path         = .
test_source_path    = ./unit_testing
test_runner_path    = ./runners
test_exe_path       = ./build
test_results_path   = ./results

# Should this be defined here?
# No - this is the same as "no callbacks found" state, which should be hard-coded in the generate_handler()
[DEFAULT_MODULE_DEF]
nothing =

# Module definitions are now fairly simple:
[MODULE_DEF_CUST]
name_convention = NAME_CONVENTION_CUST
code_style = CODE_STYLE_CUST
module_structure = MODULE_STRUCTURE_CUST
module_marker_type      = dir
module_marker_name      = unit_testing
module_test_script_name = tdd