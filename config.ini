[GLOBAL]
project: cmod_demo
software_version: 0.0.0
license:
repo: https://github.com/troyerta/cmod
author: troyerta

# Use "MM/DD/YYY" format
created: 02/03/2013
documentation: github.com/tt/cmoddocs

# Which module definition should be used by default?
default_module_def = MODULE_DEF

# Something between 0 and 7 inclusively
# 0 = Print no output to terminal while testing modules
# 1 = Show test results summary after testing complete
# 2 = Also show module progress
# 3 = Also show failed tests
# 4 = Also show ignored tests
# 5 = Also show passed tests (shows all tests)
# 6 = Group all tests by test group
# 7 = Show all groups by source file
default_test_verbosity = 4

# If not specified or valid, or style_hooks.py cannot be opened, the default name convention is a "literal passthrough" style
# If any of the expected entries does not exist here, the default will be used instead
# If any of the expected entires goes missing from here, you can regenerate a complete, default config.ini with
# cmod generate --config=new_config.ini

# File definitions can have either a name_callback,
# or at least (a prefix or suffix or both), but not both prefix/suffix and a
# populated name_callback field
# If nothing is specified, then print error

[FILE_DEF_SOURCE]
generate_callback = print_source
name_callback     = gen_source_name
path              = .
glob              = *.c

[FILE_DEF_HEADER]
generate_callback = print_header
name_callback     = gen_header_name
path              = .
glob              = *.h

[FILE_DEF_TEST_SOURCE]
generate_callback = print_test_source
name_callback     = gen_test_source_name
path              = unit_testing/tests
glob              = *_tests.c

[FILE_DEF_TEST_RUNNER]
generate_callback = print_test_runner
name_callback     = gen_test_runner_name
prefix            = test_
suffix            = _runner
path              = unit_testing/runners
glob              = test_*_runner.c

[FILE_DEF_MAKEFILE]
generate_callback = print_makefile
name_callback     = gen_makefile_name
path              = .
glob              = Makefile

[FILE_DEF_TEST_SCRIPT]
generate_callback = print_test_script
name_callback     = gen_test_script_name  # Maybe remove this for a callback anyway...
path              = .
glob              = test

# Files generated by Build/Make process
# Must have the following fields: prefix, suffix, path, and glob
# The prefix and suffix files tell the Makefile how
# to name you build/run artifacts
[FILE_DEF_TEST_BUILD]
prefix            = test_
suffix            =
path              = unit_testing/exe
glob              = *.out

[FILE_DEF_TEST_RESULT]
prefix            =
suffix            = _results
path              = unit_testing/results
glob              = *.txt

# These must have generate callbacks defined
[CMOD_FILE_GENERATORS]
runner      = FILE_DEF_TEST_RUNNER
script      = FILE_DEF_TEST_SCRIPT


[CMOD_MODULE_GENERATOR]
source      = FILE_DEF_SOURCE
header      = FILE_DEF_HEADER
test_source = FILE_DEF_TEST_SOURCE
makefile    = FILE_DEF_MAKEFILE

; These are the files the cmod clean command needs to know about
[CMOD_CLEANER]
runners = FILE_DEF_TEST_RUNNER
builds  = FILE_DEF_TEST_BUILD
results = FILE_DEF_TEST_RESULT
scripts = FILE_DEF_TEST_SCRIPT

[BUILD_SYSTEM_GENERATED]
build = FILE_DEF_TEST_BUILD
result = FILE_DEF_TEST_RESULT

# Runners are still generated during runtime, and might not be tracked with version control in all cases, AND
# are still somewhat style-dependent on the test harness being used. Setting up a test runner callback might be good as well
# Would need to allow access to all test cases and test group objects - Is this too complex to expect of the user?
# Not if good templates for these are provides beforehand, I think.
# Files generated during test runtime

# Describe where files go relative to a module root directory
# And describe how files should be named
[MODULE_DEF]
module_marker_type             = directory
module_marker_name             = unit_testing
file_generator_list_reference  = CMOD_MODULE_GENERATOR
# need a separate ref to mod list AND file list???
file_gen_callbacks             = style_hooks.py
module_name_callback           = gen_custom_module_name
