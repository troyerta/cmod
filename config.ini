[GLOBAL]
project: cmod_demo
software_version: 0.0.0
license:
repo: https://github.com/troyerta/cmod
author: troyerta

# Each [SECTION] becomes a python dictionary, able to be passed around globally
# So to add a setting, add the entry here, and can be looked up from the section
# you need.
# Use "MM/DD/YYY" format
created       = 02/03/2013
documentation = github.com/tt/cmoddocs

# Which module definition should be used by default?
default_module_def = MODULE_DEF_CUST

# Something between 0 and 7 inclusively
# default_test_verbosity = 5

# If not specified or valid, or style_hooks.py cannot be opened, the default name convention is a "literal passthrough" style
# If any of the expected entries does not exist here, the default will be used instead
# If any of the expected entires goes missing from here, you can regenerate a complete, default config.ini with
# cmod generate --config=new_config.ini

# File definitions can have either a name_callback,
# or at least (a prefix or suffix or both), but not both prefix/suffix and a
# populated name_callback field
# If nothing is specified, then print error

[FILE_DEF_SOURCE]
generate_callback = print_source
name_callback     = gen_source_name
path              = .
glob              = *.c

[FILE_DEF_HEADER]
generate_callback = print_header
name_callback     = gen_header_name
path              = .
glob              = *.h

[FILE_DEF_TEST_SOURCE]
generate_callback = print_test_source
name_callback     =
suffix            = _tests
path              = unit_testing/tests
glob              = *_tests.c

[FILE_DEF_TEST_RUNNER]
generate_callback = print_test_runner
name_callback     =
prefix            = test_
suffix            = _runner
path              = unit_testing/runners
glob              = test_*_runner.c

[FILE_DEF_MAKEFILE]
generate_callback = print_makefile
name_callback     = gen_makefile_name
path              = .
glob              = Makefile

[FILE_DEF_TEST_SCRIPT]
generate_callback = print_test_script
name_callback     = gen_test_script_name  # Maybe remove this for a callback anyway...
path              = .
glob              = test

# Files generated by Build/Make process
# The prefix and suffix files tell the Makefile how
# to name you build/run artifacts
[FILE_DEF_TEST_BUILD]
prefix            = test_
suffix            =
path              = unit_testing/exe
glob              = *.out

[FILE_DEF_TEST_RESULT]
prefix            =
suffix            = _results
path              = unit_testing/results
glob              = *.txt

# These must have generate callbacks defined
[FILE_GENERATORS]
source      = FILE_DEF_SOURCE
header      = FILE_DEF_HEADER
test_source = FILE_DEF_TEST_SOURCE
runner      = FILE_DEF_TEST_RUNNER
makefile    = FILE_DEF_MAKEFILE
script      = FILE_DEF_TEST_SCRIPT

# Runners are still generated during runtime, and might not be tracked with version control in all cases, AND
# are still somewhat style-dependent on the test harness being used. Setting up a test runner callback might be good as well
# Would need to allow access to all test cases and test group objects - Is this too complex to expect of the user?
# Not if good templates for these are provides beforehand, I think.
# Files generated during test runtime

; [STYLE]
; hook_source = style_hooks.py
; generator_header_filename_hook = gen_custom_header_filename
; generator_source_filename_hook = gen_custom_source_filename
; generator_module_name_hook = gen_custom_module_name

# Describe where files go relative to a module root directory
# And describe how files should be named
[DEFAULT_MODULE_STRUCTURE]

# Tell Cmod what marks a directory as a module
# Type can be either "directory" or "file"
module_marker_type = directory
# All project markers are the same name, and must
# be a valid dir/file name for your file system
module_marker_name = unit_testing

# Where production code / code under test lives
# Use "." to specify the module root
src_dir = .

test_script_name = test

# Unit test sources are found as unit_testing/tests/test_*_tests.c
test_dir = unit_testing/tests
test_src_prefix = test_
test_src_suffix = _tests

# Test runner ( includes test build's main() function )
# Test runner is found as unit_testing/runners/test_*_runner.c
runner_dir = unit_testing/runners
runner_src_prefix = test_
runner_src_suffix = _runner

# Artifacts of the build process
# Throw all artifacts into the same directory
obj_dir = unit_testing/exe
artifacts_dir = unit_testing/exe
exe_dir = unit_testing/exe

# Test output get redirected to a text file
# Results files are found as unit_testing/results/*_results.txt
results_dir = unit_testing/results
results_txt_prefix =
results_txt_suffix = _results

hook_source = style_hooks.py
generator_header_filename_hook = gen_custom_header_filename
generator_source_filename_hook = gen_custom_source_filename
generator_module_name_hook = gen_custom_module_name

# Something between 0 and 7 inclusively
# 0 = Print no output to terminal while testing modules
# 1 = Show test results summary after testing complete
# 2 = Also show module progress
# 3 = Also show failed tests
# 4 = Also show ignored tests
# 5 = Also show passed tests (shows all tests)
# 6 = Group all tests by test group
# 7 = Show all groups by source file
default_verbosity = 4

# Module definitions are now a list of module files, and 4 settings:
[MODULE_DEF_CUST]
# These keys are dual-maintained with get_generators()
source      = FILE_DEF_SOURCE
header      = FILE_DEF_HEADER
test_source = FILE_DEF_TEST_SOURCE
makefile    = FILE_DEF_MAKEFILE

# Generated by Makefile - needs to be described here for module Makefile
# mod_file_exe         = FILE_DEF_TEST_BUILD
# mod_file_results     = FILE_DEF_TEST_RESULT

# Tell Cmod how this module definition find modules
mod_marker_type      = directory
mod_marker_name      = unit_testing

# Tell Cmod where to find this definition's callbacks
mod_callbacks        = style_hooks.py

